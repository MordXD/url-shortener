✔ Task 1: Настройка базовой конфигурации бэкенда: @done(25-05-20 21:47)
    ✔ Заполнить `core/config.py`: @done(25-05-20 19:31)
      ✔ Создать класс `Settings` с параметрами: @done(25-05-20 19:31)
        ```python
        REDIS_HOST: str = "redis"
        REDIS_PORT: int = 6379
        BASE_URL: str = "http://localhost:8000"
        RATE_LIMIT: int = 10  # Максимум запросов в минуту
        ```
      ✔ Добавить валидацию через `pydantic.BaseSettings` @done(25-05-20 19:32)
    ✔ [ ] Инициализировать Redis-подключение в `main.py`: @started(25-05-20 19:38) @done(25-05-20 20:42) @lasted(1h4m31s)
      ✔ Создать асинхронный Redis-клиент (используя `redis.asyncio`) @done(25-05-20 19:46)
      ✔ Добавить обработчики для старта/остановки подключения к Redis @done(25-05-20 20:46)
    
    ---
    
✔ Task 2: Реализация сервиса сокращения URL: @done(25-05-20 21:47)
    ✔ [ ] Заполнить `services/shortener.py`: @done(25-05-20 20:51)
      ✔ Реализовать функцию `create_short_url(original_url: str) -> str`: @done(25-05-20 20:51)
        ✔ Генерировать уникальный 6-символьный код (a-zA-Z0-9) @done(25-05-20 20:51)
        ✔ Сохранять в Redis: `short_code -> original_url` @done(25-05-20 20:51)
        ✔ Возвращать полный URL вида `{BASE_URL}/{short_code}` @done(25-05-20 20:51)
      ✔ Реализовать функцию `get_original_url(short_code: str) -> Optional[str]`: @done(25-05-20 20:51)
        ✔ Получать оригинальный URL из Redis @done(25-05-20 20:51)
        ✔ Обрабатывать случай отсутствия кода @done(25-05-20 20:51)
    ✔ [ ] Добавить тесты в `tests/test_shortener.py`: @done(25-05-20 21:10)
      ✔ Тест генерации уникальных кодов @done(25-05-20 21:10)
      ✔ Тест сохранения/получения URL из Redis (использовать моки) @done(25-05-20 21:10)
    
    ---
    
✔ Task 3: Реализация rate limiting: @done(25-05-20 21:47)
    ✔ [ ] Заполнить `services/limiter.py`: @done(25-05-21 12:00)
      ✔ Создать декоратор `rate_limited`: @done(25-05-21 12:00)
        ✔ Использовать Redis для подсчета запросов по IP @done(25-05-21 12:00)
        ✔ Блокировать запросы при превышении `RATE_LIMIT` @done(25-05-21 12:00)
        ✔ Возвращать `HTTP 429 Too Many Requests` @done(25-05-21 12:00)
    ✔ [ ] Интегрировать лимитер в API: @done(25-05-21 12:00)
      ✔ Применить декоратор к эндпоинту `/shorten` @done(25-05-21 12:00)
    ✔ [ ] Тесты в `tests/test_limiter.py`: @done(25-05-21 12:30)
      ✔ Симуляция 15 запросов подряд @done(25-05-21 12:30)
      ✔ Проверка статуса 429 после лимита @done(25-05-21 12:30)
    
    ---
    
✔ Task 4: Реализация API эндпоинтов: @done(25-05-20 21:47)
    ✔ [ ] Заполнить `api.py`: @done(25-05-21 12:00)
      ✔ Создать роутер FastAPI @done(25-05-21 12:00)
      ✔ Эндпоинт `POST /shorten`: @done(25-05-21 12:00)
        ✔ Принимать JSON `{"original_url": "..."}` @done(25-05-21 12:00)
        ✔ Валидировать URL через `pydantic.AnyUrl` @done(25-05-21 12:00)
        ✔ Возвращать короткий URL @done(25-05-21 12:00)
      ✔ Эндпоинт `GET /{short_code}`: @done(25-05-21 12:00)
        ✔ Редирект на оригинальный URL (HTTP 307) @done(25-05-21 12:00)
        ✔ Обработка несуществующих кодов (HTTP 404) @done(25-05-21 12:00)
    ✔ [ ] Тесты API в `tests/test_api.py`: @done(25-05-21 12:30)
      ✔ Тест успешного создания URL @done(25-05-21 12:30)
      ✔ Тест редиректа @done(25-05-21 12:30)
      ✔ Тест обработки невалидных URL @done(25-05-21 12:30)
    
    ---
    
✔ Task 5: Интеграция компонентов: @done(25-05-20 21:47)
    ✔ [ ] Заполнить `main.py`: @done(25-05-21 12:00)
      ✔ Создать экземпляр `FastAPI()` @done(25-05-21 12:00)
      ✔ Подключить роутер из `api.py` @done(25-05-21 12:00)
      ✔ Добавить обработчики ошибок @done(25-05-21 12:00)
      ✔ Интегрировать конфиг из `core/config.py` @done(25-05-21 12:00)
    ✔ [ ] Проверить работу через Swagger: @done(25-05-20 21:31)
      ✔ Запустить `docker-compose up` @done(25-05-20 21:31)
      ✔ Открыть `http://localhost:8000/docs` @done(25-05-20 21:31)
      ✔ Протестировать все эндпоинты @done(25-05-20 21:31)
    
    ---
    
✔ Task 6: Настройка Docker окружения: @done(25-05-20 21:47)
    ✔ [ ] Доработать `docker-compose.yml`: @done(25-05-20 21:47)
      ✔ Добавить healthcheck для Redis @done(25-05-20 21:47)
      ✔ Настроить volumes для Redis данных @done(25-05-20 21:47)
      ✔ Добавить переменные окружения для бэкенда @done(25-05-20 21:47)
    ✔ [ ] Проверить: @done(25-05-20 21:47)
      ✔ Сохранение данных при перезапуске контейнеров @done(25-05-20 21:47)
      ✔ Автоматический реконнект бэкенда к Redis @done(25-05-20 21:47)
    
    ---
    
Task 7: Документация и финальные проверки:
    ✔ [ ] Добавить примеры запросов в `README.md` @done(25-05-21 19:00)
    ✔ [ ] Настроить `.gitignore` для Python/Redis @done(25-05-21 19:00)
    ✔ [ ] Прогнать линтеры: @done(25-05-21 19:03)
      ```bash
      poetry run black .
      poetry run isort .
      poetry run flake8
      ```
    ✔ [ ] Проверить покрытие тестами: @done(25-05-21 19:05)
      ```bash
      poetry run pytest --cov=app --cov-report=html
      ```
    
    ---    
✔ Task 8 Базовый фронтенд (React): @done(25-05-20 23:06)
    ✔ [ ] Инициализировать React в `url-shortener-frontend`: @done(25-05-20 23:06)
      ```bash
      npx create-react-app .
      ```
    ✔ [ ] Создать компонент формы: @done(25-05-20 23:06)
      ✔ Поле ввода URL @done(25-05-20 23:06)
      ✔ Кнопка "Сократить" @done(25-05-20 23:06)
      ✔ Блок с результатом (короткий URL) @done(25-05-20 23:06)
    ✔ [ ] Реализовать запрос к бэкенду: @done(25-05-20 23:06)
      ```javascript
      fetch('http://localhost:8000/shorten', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ original_url: inputUrl })
      })
      ```
    ✔ [ ] Добавить обработку ошибок (429, 400) @done(25-05-20 23:06)
    
